using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using LibraryApp.Models;
using Microsoft.AspNetCore.Mvc;

// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace LibraryApp.Controllers
{

    [Route("api/[controller]")]
    [ApiController]
    public class BookController : ControllerBase
    {
        readonly log4net.ILog _log4net;
        private readonly LibraryContext _con;
        public BookController(LibraryContext con)
        {
            _con = con;
            _log4net = log4net.LogManager.GetLogger(typeof(BookController));
        }
        // GET: api/<BookController>
        [HttpGet]
        public IActionResult Get()
        {
            //return _con.books.ToList();
            return Ok(_con.books.ToList());
        }

        // GET api/<BookController>/5
        [HttpGet("{id}")]
        public IActionResult Get(int id)
        {
            // return _con.books.Find(id);
            IQueryable<Book> obj = _con.books.Where(x => x.bookid == id);
            Book ob = obj.FirstOrDefault();
            if (obj.Count() == 0)
            {
                return BadRequest(ob);
            }

            return Ok(ob);
        }

        // POST api/<BookController>
        [HttpPost]
        public string Post([FromBody] Book obj)
        {
            _con.books.Add(obj);
            _con.SaveChanges();
            return "SUCCESSFULLY ADDED";
        }

        // PUT api/<BookController>/5
        [HttpPut("{id}")]
        public string Put(int id, [FromBody] Book ob)
        {
            IQueryable<Book> obj = _con.books.Where(x => x.bookid == id);
            if (obj.Count() > 0)
            {
                Book b = obj.FirstOrDefault();
                b.ISBN = ob.ISBN;
                b.name = ob.name;
                b.publication = ob.publication;
                b.quantity = ob.quantity;
                _con.SaveChanges();
                return "SUCCESSFULLY UPDATED";
            }
            else
            {
                return "ID DOES NOT EXIST";
            }

        }

        // DELETE api/<BookController>/5
        [HttpDelete("{id}")]
        public string Delete(int id)//bookid generated by identity
        {
            IQueryable<Book> obj = _con.books.Where(x => x.bookid == id);
            if (obj.Count() > 0)
            {
                IQueryable<Allocation> obj2 = _con.allocations.Where(x => x.bookid == id);
                foreach (var item in obj2)//no need to consider allocation id into account 
                {
                    //item is an allocation type object
                    //int y = item.bookid;
                    //if (id == y)
                    //{
                    //    _con.allocations.Remove(item);
                    //}
                    //_con.SaveChanges();
                    _con.allocations.Remove(item);
                }

                _con.books.Remove(obj.FirstOrDefault());
                _con.SaveChanges();
                return "SUCCESSFULLY DELETED";
            }
            else
            {
                return "ID DOES NOT EXIST";
            }
        }
    }
}
